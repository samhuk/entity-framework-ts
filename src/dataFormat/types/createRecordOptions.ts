import { DataFormat } from '.'
import { ExpandOneLevel, PickAny, ValuesUnionFromDict } from '../../helpers/types'
import { DataType, NumSubType, StrSubType } from './dataType'
import { Fields } from './field'
import { ExtractHasDefaultFieldNames, ExtractOptionalRecordFieldNames, ExtractRequiredRecordFieldNames, FieldsToRecord } from './record'

/**
 * Extracts the field names from the given data format declaration that
 * are not auto-generated in some fashion, i.e. dateCreated fields, id fields,
 * uuid fields, and so on.
 */
type ExtractAutoGeneratedFieldNames<TFields extends Fields> =
  Extract<
    ValuesUnionFromDict<TFields>,
    // Include datetime fields that default to current epoch
    { type: DataType.EPOCH, defaultToCurrentEpoch: true }
    // Include serial number fields (i.e. typically "id")
    | { type: DataType.NUM, subType: NumSubType.SERIAL }
    // Include string fields that default to an auto-generated uuid (i.e. v4uuid)
    | { type: DataType.STR, subType: StrSubType.UUID_V4, autoGenerate: true }
  >['name']

type ExtractExplicitExcludeInCreateOptionsFieldNames<TFields extends Fields> = Extract<
  ValuesUnionFromDict<TFields>,
  { excludeFromCreateOptions: true }
>['name']

/**
 * Extracts the field names from the given data format declaration that
 * have a defined default value.
 */
type ExtractFieldNamesWithDefaults<TFields extends Fields> =
  Extract<ValuesUnionFromDict<TFields>, { default: any }>['name']

type CreateRecordOptionsFieldNames<TFields extends Fields> = Exclude<
  ValuesUnionFromDict<TFields>['name'],
  ExtractAutoGeneratedFieldNames<TFields> | ExtractExplicitExcludeInCreateOptionsFieldNames<TFields>
>

type CreateRecordOptionsRequiredFieldNames<TFields extends Fields> = Exclude<
  CreateRecordOptionsFieldNames<TFields> & ExtractRequiredRecordFieldNames<TFields>,
  ExtractHasDefaultFieldNames<TFields>
>

type CreateRecordOptionsOptionalFieldNames<TFields extends Fields> =
  (CreateRecordOptionsFieldNames<TFields> & ExtractOptionalRecordFieldNames<TFields>)
  | ExtractHasDefaultFieldNames<TFields>

/**
 * Creates a type that can be used to create a record for the given data format declaration.
 *
 * This takes fields out of the standard record type that are auto-generated.
 */
export type FieldsToCreateRecordOptions<TFields extends Fields> = ExpandOneLevel<
  // Required fields: don't have defaults
  PickAny<
    FieldsToRecord<TFields>,
    CreateRecordOptionsRequiredFieldNames<TFields>
  >
  // Optional fields: have defaults or allow null
  & Partial<
    PickAny<
      FieldsToRecord<TFields>,
      CreateRecordOptionsOptionalFieldNames<TFields>
    >
  >
>

export type CreateRecordOptions<TDataFormat extends DataFormat = DataFormat> =
  FieldsToCreateRecordOptions<TDataFormat['fields']>

export type FieldsToManualCreateRecordOptions<TFields extends Fields> =
  // Pick auto-generated fields (optional)
  Partial<
    PickAny<
      FieldsToRecord<TFields>,
      ExtractAutoGeneratedFieldNames<TFields>
    >
  >
  // Pick fields with defaults (optional)
  & Partial<
    PickAny<
    FieldsToRecord<TFields>,
      ExtractFieldNamesWithDefaults<TFields>
    >
  >
  // Pick rest of fields (required)
  & Omit<
    FieldsToRecord<TFields>,
    ExtractAutoGeneratedFieldNames<TFields> | ExtractFieldNamesWithDefaults<TFields>
  >

export type ManualCreateRecordOptions<TDataFormat extends DataFormat = DataFormat> =
  FieldsToManualCreateRecordOptions<TDataFormat['fields']>
