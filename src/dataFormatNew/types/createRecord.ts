import { COMMON_FIELDS } from '../../dataFormat/common'
import { PickAny } from '../../helpers/types'
import { DataType, NumberType, StringType } from '../field/dataType'
import { Fields } from '../field/types'
import { USER_DF } from '../testData'
import { FieldsToRecord } from './record'

/**
 * Extracts the field names from the given data format declaration that
 * are auto-generated in some way.
 */
type ExtractAutoGeneratedFieldNames<T extends Fields> = (
  // Exclude datetime fields that default to current epoch
  Extract<T[keyof T], { type: DataType.DATE, defaultToCurrentEpoch: true }>['name']
  // Exclude serial number fields (i.e. typically "id")
  | Extract<T[keyof T], { type: DataType.NUMBER, subType: NumberType.SERIAL }>['name']
  // Exclude string fields that default to an auto-generated uuid (i.e. v4uuid)
  | Exclude<Extract<T[keyof T], { type: DataType.STRING, subType: StringType.UUID_V4 }>, { autoGenerate: false }>['name']
)

/**
 * Extracts the field names from the given data format declaration that
 * are not auto-generated in some way.
 */
type ExtractNonAutoGeneratedFieldNames<T extends Fields> =
  Exclude<keyof T, ExtractAutoGeneratedFieldNames<T>>

/**
 * Extracts the field names from the given data format declaration that
 * have a defined default value.
 */
type ExtractFieldNamesWithDefaults<T extends Fields> =
  Extract<T[keyof T], { default: any }>['name']

type _FieldsToCreateRecordOptions<
  TRecord extends any,
  NonAutoGenFieldNames extends string,
  FieldNamesWithDefaults extends string,
> =
  // Pick the fields from the full record that are required
  Omit<
    // Pick the fields from the full record that don't have auto-generated fields
    PickAny<TRecord, NonAutoGenFieldNames>,
    // From the fields that aren't auto-generated, omit dateDeleted as a special case
    FieldNamesWithDefaults | typeof COMMON_FIELDS['dateDeleted']['name']
  >
  // Pick (add on) the fields that are optional
  & Partial<PickAny<TRecord, FieldNamesWithDefaults>>

/**
 * Creates a type that can be used to create a record for the given data format declaration.
 *
 * Basically, this takes fields out of the standard record type that are auto-generated, and
 * makes fields with defaults optional.
 */
export type FieldsToCreateRecordOptions<T extends Fields> = _FieldsToCreateRecordOptions<
  FieldsToRecord<T>,
  ExtractNonAutoGeneratedFieldNames<T> & string,
  ExtractFieldNamesWithDefaults<T>
>

type _FieldsToManualCreateRecordOptions<
  TRecord extends any,
  AutoGenFieldNames extends string,
  FieldNamesWithDefaults extends string,
> =
  // Pick auto-generated fields and fields with defaults (optional)
  Partial<PickAny<TRecord, AutoGenFieldNames | FieldNamesWithDefaults>>
  // Pick rest of fields (required)
  & Omit<TRecord, AutoGenFieldNames | FieldNamesWithDefaults>

export type FieldsToManualCreateRecordOptions<T extends Fields> = _FieldsToManualCreateRecordOptions<
    FieldsToRecord<T>,
    ExtractAutoGeneratedFieldNames<T>,
    ExtractFieldNamesWithDefaults<T>
>

export type CreateRecordFieldNames<T extends Fields> = (keyof FieldsToCreateRecordOptions<T>)[]
